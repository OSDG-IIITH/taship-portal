(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1050, u"Table \'auth_user\' already exists")'
p3
sS'layer'
p4
S'/var/www/html/web2py/applications/taportal/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\nif not request.env.web2py_runtime_gae:\n\t## if NOT running on Google App Engine use SQLite or other DB\n\t#db = DAL('sqlite://storage.sqlite')\n\tdb = DAL('mysql://adminta:passtowards@localhost/tashiptest', migrate=True)\nelse:\n\tdb = DAL('google:datastore')\n\tsession.connect(request, response, db = db)\n\nresponse.generic_patterns = ['*'] if request.is_local else []\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\nfrom gluon.tools import Mail\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n\n## configure email\n\nmail=Mail()                                  # mailer\nmail.settings.server='mail.iiit.ac.in:25'    # your SMTP server\n# mail.settings.login='username:password'      # your credentials or None\n\n\n## -------------------------- Databases Defined Here ---------------------------------- ##\n\n###############################################\n# Stores all information about the applicants.#\n###############################################\ndb.define_table(\n    'Applicant',\n    Field('ap_name','string',required=True, label='Full Name'),\n    Field('ap_emailid','string',requires=IS_EMAIL(), label='Email-id'),\n    Field('ap_rollno','integer',requires=IS_INT_IN_RANGE(minimum=200000000, maximum=300000000),required=True, label='Roll No'),\n    Field('ap_cgpa','double',required=True,requires=IS_FLOAT_IN_RANGE(minimum=0,maximum=10), label='CGPA'),\n    Field('ap_phoneno','integer',required=True, requires=IS_INT_IN_RANGE(minimum=10000000, maximum=9999999999),label='Phone No'),\n    Field('ap_prevexp','string',default='No Experience', label='Prev. Experience'),\n    Field('ap_program','string',requires=IS_IN_SET(['UG1','UG2','UG3','UG4','PG1','PG2','MS','PhD']),default='UG3', label='Program')\n    )\n\n#########################\n# Stores list of admins.#\n#########################\ndb.define_table(\n    'Admin',\n    Field('ad_name','string',required=True, label='Admin Name'),\n    Field('ad_emailid','string',requires=IS_EMAIL(), label='Admin Email-id')\n    )\n\n##########################\n# Stores list of faculty.#\n##########################\ndb.define_table(\n    'Faculty',\n    Field('fac_name','string',required=True, label='Faculty Name'),\n    Field('fac_emailid','string',requires=IS_EMAIL(), label='Faculty Email-id')\n    )\n\n#####################\n# List of semesters.#\n#####################\ndb.define_table(\n    'Semester',\n    Field('sem_name','string',required=True, label='Semester Name')\n    )\n\n#####################################\n# List of courses and their details.#\n#####################################\ndb.define_table(\n    'Course',\n    Field('c_code','string',required=True, label='Course Code'),\n    Field('c_name','string',required=True, label='Course Name'),\n    Field('c_credits','integer',required=True,requires=IS_INT_IN_RANGE(minimum=1,maximum=6), label='Credits'),\n    Field('max_ta','integer',required=True,default=10,label='Max #TAs'),\n    Field('no_of_qta','integer',default=0,required=True, label='#quarter-TAs'),\n    Field('no_of_hta','integer',default=0,required=True, label='#half-TAs'),\n    Field('no_of_fta','integer',default=0,required=True, label='#full-TAs'),\n    Field('hrs_per_week','integer', label='Hours per week'),\n    Field('sem_id',db.Semester,required=True,requires=IS_IN_DB(db,'Semester.id','Semester.sem_name'), label='For semester'),\n    Field('c_type','string',requires=IS_IN_SET(['Full Sem','Half Sem']),default='Full', label='Course Type'),\n    Field('no_of_faculty','integer',required=True,default=1, label='#Instructors')\n    )\n\n##############################\n# Links Faculties to Courses.#\n##############################\ndb.define_table(\n    'Faculty_Course',\n    Field('fac_id',db.Faculty,required=True,requires=IS_IN_DB(db,'Faculty.id','Faculty.fac_name'), label='Faculty'),\n    Field('c_id',db.Course,required=True,requires=IS_IN_DB(db,'Course.id','Course.c_name'), label='Course')\n    )\n\n##################################\n# List of nominations by Faculty.#\n##################################\ndb.define_table(\n    'Nomination',\n    Field('c_id',db.Course,required=True,requires=IS_IN_DB(db,'Course.id','Course.c_name'), label='Course'),\n    Field('ap_id',db.Applicant,required=True,requires=IS_IN_DB(db,'Applicant.id','Applicant.ap_name'), label='Applicant')\n    )\n\n#################################\n# List of TA's finally selected.#\n#################################\ndb.define_table(\n    'Selected',\n    Field('ap_id',db.Applicant,required=True,requires=IS_IN_DB(db,'Applicant.id','Applicant.ap_name'), label='Applicant'),\n    Field('nom_id',db.Nomination,required=True,requires=IS_IN_DB(db,'Nomination.id','Nomination.id'), label='Nomination'),\n    Field('c_id',db.Course,required=True,requires=IS_IN_DB(db,'Course.id','Course.c_name'), label='Course'),\n    Field('ta_type','string',required=True,requires=IS_IN_SET(['Qtr. TA','Half TA','Full TA']),default='Qtr. TA', label='TA Type'),\n    Field('time_sel','datetime',required=True,default=request.now,writable=False,readable=False, label='Selected on')\n    )\n\n##############################################\n# Links Applicants to Courses they apply for.#\n##############################################\ndb.define_table(\n    'Application',\n    Field('ap_id',db.Applicant,required=True,requires=IS_IN_DB(db,'Applicant.id','Applicant.ap_name'),readable=False),\n    Field('c_id',db.Course,required=True,requires=IS_IN_DB(db,'Course.id','Course.c_name'),label='Course'),\n    Field('grade','string',required=True,requires=IS_IN_SET(['A','A-','B','B-','C','C-','D','F','P','S','X','I','W']),default='A',label='Grade Obtained'),\n    Field('applied_at','datetime',required=True,default=request.now,writable=False,readable=False),\n    Field('pref','integer',requires=IS_IN_SET([1,2,3,4,5,6,7,8,9,10]),label='Preference'),\n    Field('status',requires=IS_IN_SET(['Selected','Rejected','Nominated','Applied']),default='Applied',writable=False,readable=False)\n    )\n\n#######################################\n# Set the Application Period Deadline.#\n#######################################\ndb.define_table(\n    'AppDeadline',\n    Field('start','datetime',required=True, label='Start Time'),\n    Field('end','datetime',required=True, label='End Time')\n    )\n\n#######################################\n# Set the Nomination Period Deadline.#\n#######################################\ndb.define_table(\n    'NomDeadline',\n    Field('start','datetime',required=True, label='Start Time'),\n    Field('end','datetime',required=True, label='End Time')\n    )\n\n## ------------------------------ Databases Definition Ends Here ---------------------------------- ##\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/www/html/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/var/www/html/web2py/applications/taportal/models/db.py", line 19, in <module>\n    auth.define_tables(username=False, signature=False)\n  File "/var/www/html/web2py/gluon/tools.py", line 1875, in define_tables\n    format=\'%(first_name)s %(last_name)s (%(id)s)\'))\n  File "/var/www/html/web2py/gluon/dal.py", line 8414, in define_table\n    table = self.lazy_define_table(tablename, *fields, **args)\n  File "/var/www/html/web2py/gluon/dal.py", line 8450, in lazy_define_table\n    polymodel=polymodel)\n  File "/var/www/html/web2py/gluon/dal.py", line 1107, in create_table\n    self.create_sequence_and_triggers(query, table)\n  File "/var/www/html/web2py/gluon/dal.py", line 1949, in create_sequence_and_triggers\n    self.execute(query)\n  File "/var/www/html/web2py/gluon/dal.py", line 1967, in execute\n    return self.log_execute(*a, **b)\n  File "/var/www/html/web2py/gluon/dal.py", line 1961, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/var/www/html/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/var/www/html/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nInternalError: (1050, u"Table \'auth_user\' already exists")\n'
p11
s.