(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Table' object has no attribute 'ap_status'"
p3
sS'layer'
p4
S'/var/www/html/web2py/applications/taportal/controllers/faculty.py'
p5
sS'code'
p6
S'## ------ Controllers for the Faculty ------ ##\n\n#########################################################################\n\n# Section to handle mails\n\nimport smtplib\nimport gluon\nimport datetime\n\nclass NewMail(object):\n    def __init__(self):\n        self.settings = gluon.tools.Settings()\n        self.settings.server = \'smtp.gmail.com:587\'\n        self.settings.use_tls = True\n        self.settings.sender = \'\'\n        self.settings.login = ""\n        self.settings.lock_keys = True\n    def send(self,to,subject,mesg):\n            try:\n                (host, port) = self.settings.server.split(\':\')\n                server = smtplib.SMTP(host, port)\n                if self.settings.login:\n                    server.ehlo()\n                    server.ehlo()\n                    (username, password) = self.settings.login.split(\':\')\n                mesg = "From: %s\\n"%(self.settings.sender)+"To: %s\\n" %(to)+"Subject: %s\\n" % (subject)+"\\r\\n"+(mesg)+"\\r\\n"\n                server.sendmail(self.settings.sender, to, mesg)\n                server.quit()\n            except Exception, e:\n                print e\n                return False\n            return True\n\ndef sendmail(sender,reciever,subj,title):\n\n    mail=NewMail()\n    # specify server\n    mail.settings.server=\'mail.iiit.ac.in:25\'\n    mail.settings.login=\'username:password\' or None\n\n# specify address to send as\n    mail.settings.sender=sender\n\n#   mail.settings.lock_keys=True\n    mail.settings.use_tls=True\n#   return mail.settings.keys()\n\n#send the message\n    print "Mail to be sent"\n    return mail.send(to=reciever, subject=title, mesg=subj)\n\n#sendmail(\'mohit.jain@research.iiit.ac.in\',\'mohit.jain@research.iiit.ac.in\',\'hello there!\',\'test mail\')\n\n\n\ndef check_usertype():\n    """ \n    Redirects malicious users to their homepages.\n    """\n    if session.login==1:\n        msg = \'Stop trying to mess things up -_-\'\n        redirect(URL(\'overall_admin\',\'index?message=%s\'%msg))\n    elif session.login==2:\n        msg = \'Stop trying to mess things up -_-\'\n        redirect(URL(\'faculty\',\'index?message=%s\'%msg))\n    elif session.login==3:\n        msg = \'Stop trying to mess things up -_-\'\n        redirect(URL(\'default\',\'index?message=%s\'%msg))\n    \n    session.flash = \'An unexpected error occured :/\'\n    redirect(URL(\'default\',\'login\'))\n\ndef index():\n    \'\'\'\n    Homepage for faculty.\n    \'\'\'\n    if not session.login==2:\n        check_usertype()\n\n    if not request.vars.message:\n\tmessage = \'Greetings \'+session.name\n    else:\n\tmessage = request.vars.message\n\n    response.flash = message\n    return locals()\n\ndef application_detail():\n    \'\'\'\n    List of applications for the courses taken by the faculty.\n    \'\'\'\n    if not session.login==2:\n        check_usertype()\n\n    course_list = db((db.Course.id>0) & (db.Faculty_Course.c_id==db.Course.id) & (db.Faculty_Course.fac_id==db.Faculty.id) & (db.Faculty.fac_emailid==session.email)).select(db.Course.ALL)\n\n    courseid = \'\'\n    if request.vars.sel_courseid and request.vars.sel_courseid!=\'all\':\n        courseid = int(request.vars.sel_courseid)\n        appDetail = db((db.Application.id>0) & (db.Application.c_id==db.Faculty_Course.c_id) & (db.Faculty_Course.fac_id==db.Faculty.id) & (db.Faculty.fac_emailid == session.email) & (db.Course.id==db.Application.c_id) & (db.Application.ap_id==db.Applicant.id) & (db.Application.c_id==courseid)).select(db.Application.ALL, db.Course.ALL, db.Applicant.ALL, orderby=db.Course.id)\n    else:\n        appDetail = db((db.Application.id>0) & (db.Application.c_id==db.Faculty_Course.c_id) & (db.Faculty_Course.fac_id==db.Faculty.id) & (db.Faculty.fac_emailid == session.email) & (db.Course.id==db.Application.c_id) & (db.Application.ap_id==db.Applicant.id)).select(db.Application.ALL, db.Course.ALL, db.Applicant.ALL, orderby=db.Course.id)\n\n    return locals()\n\ndef nominate_application():\n    \'\'\'\n    Changes the status of selected applications from Applied->Nominated.\n    \'\'\'\n    if not session.login==2:\n        check_usertype()\n\n    nomTime = db(db.NomDeadline.id>0).select(db.NomDeadline.ALL)[-1]\n    nomStart = nomTime[\'start\']\n    nomEnd = nomTime[\'end\']\n\n    st_delta = request.now - nomStart\n    end_delta = request.now - nomEnd\n\n    if st_delta < datetime.timedelta(seconds=1):\n\tmsg = \'Nomination Period starts on \'+str(nomStart)\n\tredirect(URL(\'faculty\',\'index?message=%s\'%msg))\n    if end_delta > datetime.timedelta(seconds=1):\n\tmsg = \'Nomination Perod ended on \'+str(nomEnd)+\' : Contact Admins for help\'\n\tredirect(URL(\'faculty\',\'index?message=%s\'%msg))\n\n    indices = request.vars.check\n    if indices:\n        for idx in indices:\n            db(db.Application.id==idx).update(status=\'Nominated\')\n            applicant_id = db(db.Application.id==idx).select()[0][\'ap_id\']\n            course_id = db(db.Application.id==idx).select()[0][\'c_id\']\n            db(db.Applicant.id==applicant_id).update(ap_status=\'Nominated\')\n            #db.Nomination.insert(c_id=course_id, ap_id=idx, type=\n\t    for admin_email in db(db.Admin.id>0).select(db.Admin.ALL):\n\t\tadmin_email = admin_email[\'ad_emailid\']\n    \t        sendmail(session.email,admin_email,\'I have nominated the students as TAs for my course on TAship Portal. Please accept them as TAs as soon as you can. --\'+session.name,\'[TA-Portal] Nominations from \'+session.name)\n    else:\n        pass\n\n    redirect(URL(\'faculty\',\'application_detail\'))\n    return locals()\n\nresponse._vars=response._caller(nominate_application)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/www/html/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/var/www/html/web2py/applications/taportal/controllers/faculty.py", line 145, in <module>\n  File "/var/www/html/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/var/www/html/web2py/applications/taportal/controllers/faculty.py", line 134, in nominate_application\n    db(db.Applicant.id==applicant_id).update(ap_status=\'Nominated\')\n  File "/var/www/html/web2py/gluon/dal.py", line 10768, in update\n    if any(f(self, update_fields) for f in table._before_update):\n  File "/var/www/html/web2py/gluon/dal.py", line 10768, in <genexpr>\n    if any(f(self, update_fields) for f in table._before_update):\n  File "/var/www/html/web2py/gluon/dal.py", line 10822, in delete_uploaded_files\n    fields = [f for f in fields if table[f].type == \'upload\'\n  File "/var/www/html/web2py/gluon/dal.py", line 9110, in __getitem__\n    return ogetattr(self, str(key))\nAttributeError: \'Table\' object has no attribute \'ap_status\'\n'
p11
s.