(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'module' object has no attribute 'delta'"
p3
sS'layer'
p4
S'/var/www/html/web2py/applications/taportal/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\nimport ldap\n#########################################################################\n\n# Section to handle mails\n\nimport smtplib\nimport gluon\nimport datetime\n\nclass NewMail(object):\n    def __init__(self):\n        self.settings = gluon.tools.Settings()\n        self.settings.server = \'smtp.gmail.com:587\'\n        self.settings.use_tls = True\n        self.settings.sender = \'\'\n        self.settings.login = ""\n        self.settings.lock_keys = True\n    def send(self,to,subject,mesg):\n            try:\n                (host, port) = self.settings.server.split(\':\')\n                server = smtplib.SMTP(host, port)\n                if self.settings.login:\n                    server.ehlo()\n                    server.ehlo()\n                    (username, password) = self.settings.login.split(\':\')\n                mesg = "From: %s\\n"%(self.settings.sender)+"To: %s\\n" %(to)+"Subject: %s\\n" % (subject)+"\\r\\n"+(mesg)+"\\r\\n"\n                server.sendmail(self.settings.sender, to, mesg)\n                server.quit()\n            except Exception, e:\n                print e\n                return False\n            return True\ndef sendmail(sender,reciever,subj,title):\n\n    mail=NewMail()\n    # specify server\n    mail.settings.server=\'mail.iiit.ac.in:25\'\n    mail.settings.login=\'username:password\' or None\n\n# specify address to send as\n    mail.settings.sender=sender\n\n#   mail.settings.lock_keys=True\n    mail.settings.use_tls=True\n#   return mail.settings.keys()\n\n#send the message\n    print "Mail to be sent"\n    return mail.send(to=reciever, subject=title, mesg=subj)\n\n#sendmail(\'mohit.jain@research.iiit.ac.in\',\'mohit.jain@research.iiit.ac.in\',\'hello there!\',\'test mail\')\n\n#########################################################################\nCAS.login_url=\'https://login.iiit.ac.in/cas/login\'\nCAS.check_url=\'https://login.iiit.ac.in/cas/validate\'\nCAS.logout_url=\'https://login.iiit.ac.in/cas/logout\'\nCAS.my_url=\'http://taship.iiit.ac.in/taportal/default/login\'\n#CAS.my_url=\'http://localhost:8000/taportal/default/login\'\n#########################################################################\n\n# To make sure everyone logins\nif not session.token and not request.function==\'login\':\n    redirect(URL(r=request, f=\'login\'))\n\n\ndef login():\n    """\n    Method to fetch the user detials from CAS\n    Redirects to respective user interface\n    """\n    session.login = 0\n    session.token = CAS.login(request)\n    user_email=session.token\n\n    l = ldap.initialize("ldap://ldap.iiit.ac.in")\n    l.protocol_version = ldap.VERSION3\n    baseDN = "ou=Users,dc=iiit,dc=ac,dc=in"\n    searchScope = ldap.SCOPE_SUBTREE\n    searchFilter = "mail="+user_email    \n    result = l.search_s(baseDN, searchScope, searchFilter)\n    result = result[0][1]\n\n    user_name = result[\'cn\'][0]\n    \n    session.name = user_name\n    session.email = user_email\n    \n    if \'uidNumber\' in result:\n        user_roll = result[\'uidNumber\'][0]\n    else:\n        user_roll = result[\'uid\'][0]\n\n    # check if admin\n    is_admin = db(db.Admin.ad_emailid==user_email).select(db.Admin.ALL)\n    if is_admin:\n        session.login = 1\n        redirect(URL(\'overall_admin\',\'index\'))\n\n    # check if faculty\n    is_faculty = db(db.Faculty.fac_emailid==user_email).select(db.Faculty.ALL)\n    if is_faculty:\n        session.login = 2\n        redirect(URL(\'faculty\',\'index\'))\n\n    # else is student. Check if details are filled already.\n    has_applied = db(db.Applicant.ap_emailid==user_email).select(db.Applicant.ALL)\n    session.login = 3\n    session.roll = user_roll\n    if has_applied:\n\tsession.userid = has_applied[0][\'id\']\n        redirect(URL(\'default\',\'index\'))\n    else:\n        redirect(URL(\'default\',\'fill_details\'))\n\ndef logout():\n    session.token = None\n    CAS.logout()\n\ndef check_usertype():\n    """\n    Redirects malicious users to their homepages.\n    """\n    if session.login==1:\n        msg = \'Stop trying to mess things up -_-\'\n        redirect(URL(\'overall_admin\',\'index?message=%s\'%msg))\n    elif session.login==2:\n        msg = \'Stop trying to mess things up -_-\'\n        redirect(URL(\'faculty\',\'index?message=%s\'%msg))\n    elif session.login==3:\n        msg = \'Stop trying to mess things up -_-\'\n        redirect(URL(\'default\',\'index?message=%s\'%msg))\n    session.flash = \'An unexpected error occured :/\'\n    redirect(URL(\'default\',\'login\'))\n\ndef index():\n    """\n    Landing page for students.\n    """\n    if not session.login==3:\n        check_usertype()\n    \n    if not request.vars.message:\n\tmessage=\'Greetings \'+session.name\n    else:\n        message=request.vars.message\n\n    response.flash = T(message)\n    message = \'Welcome to TAship Portal!\'\n    return locals()\n\ndef fill_details():\n    """\n    Get complete details of the applicant.\n    """\n    if not session.login==3:\n        check_usertype()\n    \n    db.Applicant.ap_name.default=session.name\n    db.Applicant.ap_emailid.default=session.email\n    db.Applicant.ap_rollno.default=session.roll\n    db.Applicant.ap_name.writable=False\n    db.Applicant.ap_emailid.writable=False\n    db.Applicant.ap_rollno.writable=False\n   \n    has_applied = db(db.Applicant.ap_emailid==session.email).select(db.Applicant.ALL)\n    if has_applied:\n        applicantForm = SQLFORM(db.Applicant,db.Applicant(has_applied[0][\'id\']))\n    else:\n        applicantForm = SQLFORM(db.Applicant)\n    if applicantForm.process().accepted:\n        user_id = db(db.Applicant.ap_emailid==session.email).select(db.Applicant.ALL)[0][\'id\']\n        session.userid = user_id\n        response.flash = \'Applicant Details Updated\'\n        redirect(URL(\'default\',\'index\'))\n    elif applicantForm.errors:\n        response.flash = \'Form has errors!\'\n\n    return locals()\n\ndef apply():\n    """\n    Method shows form for applying as TA.\n    Options to move preference up/down or remove application.\n    """\n    if not session.login==3:\n        check_usertype()\n   \n    AppTime = db(db.AppDeadline.id>0).select(db.AppDeadline.ALL)[0]\n    startTime = AppTime[\'start\']\n    endTime = AppTime[\'end\']\n\n    st_delta = request.now - startTime\n    end_delta = request.now - endTime\n\n    if st_delta < datetime.delta(seconds=1):\n\tmsg = \'Application Period starts on \'+str(startTime)\n        redirect(URL(\'default\',\'index?message=%s\'%msg))\n    if end_delta > datetime.delta(seconds=1):\n\tmsg = \'Application Period has ended on \'+str(endTime)+\' now time : \'+str(request.now)\n        redirect(URL(\'default\',\'index?message=%s\'%msg))\n \n    filledApps = db((db.Application.ap_id==session.userid) & (db.Application.c_id==db.Course.id) &(db.Application.ap_id==db.Applicant.id)).select(db.Application.ALL, db.Applicant.ALL, db.Course.ALL, orderby=db.Application.pref)\n   \n    cur_pref = 1\n    if filledApps: \n        cur_pref = filledApps[-1][\'Application\'][\'pref\']+1\n    \n    db.Application.ap_id.default = session.userid\n    db.Application.ap_id.writable = False\n    db.Application.pref.default = cur_pref\n    db.Application.pref.writable = False\n    applicationForm = SQLFORM(db.Application)\n    if applicationForm.process().accepted:\n        response.flash = \'Application Successfully Submitted!\'\n        redirect(URL(\'default\',\'apply\'))\n    elif applicationForm.errors:\n        response.flash = \'Form has errors!\'\n\n    return locals()\n\ndef update_pref():\n    """\n    Updates the preference of applications moving requested application one step up.\n    """\n    if not session.login==3:\n        check_usertype()\n    \n    if request.vars.pref_val:\n        source_pref = int(request.vars.pref_val)\n        target_pref = source_pref-1\n        if source_pref==1:\n            session.flash = \'Stop trying to mess things up -_-\'\n            redirect(URL(\'default\',\'apply\'))\n    \n        source_app = db((db.Application.ap_id==session.userid) & (db.Application.pref==source_pref)).select(db.Application.ALL)\n        target_app = db((db.Application.ap_id==session.userid) & (db.Application.pref==target_pref)).select(db.Application.ALL)\n\n        if source_app and target_app:\n            db(db.Application.id==source_app[0][\'id\']).update(pref=target_pref)\n            db(db.Application.id==target_app[0][\'id\']).update(pref=source_pref)\n            redirect(URL(\'default\',\'apply\'))\n        else:\n            session.flash = \'Stop trying to mess things up -_-\'\n            redirect(URL(\'default\',\'apply\'))\n    elif request.vars.app_id:\n        del_app_id = int(request.vars.app_id)\n        del_app_pref = db((db.Application.ap_id==session.userid) & (db.Application.id==del_app_id)).select(db.Application.ALL)\n        if not del_app_pref:\n            session.flash = \'Stop trying to mess things up -_-\'\n            redirect(URL(\'default\',\'apply\'))\n        \n        del_app_pref = del_app_pref[0][\'pref\']\n        len_prefs = len(db(db.Application.ap_id==session.userid).select(db.Application.ALL))\n        for ap_pref in range(del_app_pref+1,len_prefs+1):\n            db((db.Application.ap_id==session.userid) & (db.Application.pref==ap_pref)).update(pref=ap_pref-1)\n        db(db.Application.id==del_app_id).delete()\n        redirect(URL(\'default\',\'apply\'))\n    else:\n        session.response = \'Invalid Request\'\n        redirect(URL(\'default\',\'apply\'))\n\ndef admin_page():\n    """\n    Display the list of Admins.\n    """\n    adminList = db(db.Admin.id>0).select(db.Admin.ALL)\n    \n    return locals()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(apply)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/www/html/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/var/www/html/web2py/applications/taportal/controllers/default.py", line 311, in <module>\n  File "/var/www/html/web2py/gluon/globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "/var/www/html/web2py/applications/taportal/controllers/default.py", line 198, in apply\n    if st_delta < datetime.delta(seconds=1):\nAttributeError: \'module\' object has no attribute \'delta\'\n'
p11
s.